{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.css","shared/utility.js","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","deliveryMethod","options","displayValue","email","isEmail","formIsValid","orderHandler","event","preventDefault","setState","loading","formData","formElementIdentifier","order","ingrediends","ings","price","totalPrice","toFixed","orderData","userId","onOrderBurger","token","inputChangeHandler","inputIdentifier","JSON","parse","stringify","updatedFormElement","target","checkValidity","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","index","Input","changed","invalid","shouldValidate","disabled","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","validationError","Invalid","join","onChange","option","Label","label","module","exports","rules","isValid","trim","length","test"],"mappings":"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","file":"static/js/3.2e493ad8.chunk.js","sourcesContent":["import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return ( \n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button\n            btnType='Danger'\n            clicked={props.checkoutCancelled}>\n                CANCEL\n                </Button>\n            <Button\n            btnType='Success'\n            clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n \nexport default checkoutSummary;","import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/WithErrorHandler/WithErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Zip Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 4,\n                    maxLength: 6,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'average', displayValue: 'Average' },\n                        { value: 'slow', displayValue: 'Slow' },\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        this.setState({ loading: true });\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingrediends: this.props.ings,\n            price: this.props.totalPrice.toFixed(2),\n            orderData: formData,\n            userId: this.props.userId\n        }\n\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n\n    inputChangeHandler = (event, inputIdentifier) => {\n        const formData = {\n            ...JSON.parse(JSON.stringify(this.state.orderForm))\n        };\n        const updatedFormElement = {\n            ...formData[inputIdentifier]\n        }\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        formData[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in formData) {\n            formIsValid = formData[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({ orderForm: formData, formIsValid: formIsValid })\n    }\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map((formElement, index) => (\n                    <Input\n                        key={index}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangeHandler(event, formElement.id)}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched} />\n                ))}\n                <Button\n                btnType=\"Success\"\n                disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if (this.props.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter you contact Data!!</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport { Route, Redirect } from 'react-router-dom';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\n\nclass Checkout extends Component {\n\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to='/'/>;\n        if(this.props.ings) {\n            const purchasedRedirect = this.props.purchased? <Redirect to='/'/> : null;\n            summary = (\n            <div>\n                {purchasedRedirect}\n                <CheckoutSummary\n                ingredients={this.props.ings}\n                checkoutCancelled={this.checkoutCancelledHandler}\n                checkoutContinued={this.checkoutContinuedHandler} />\n                <Route\n                    path={this.props.match.path + '/contact-data'}\n                    component={ContactData}/>\n                    </div>)\n        }\n        return summary;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n    let validationError = null;\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    if (props.invalid && props.touched) {\n        validationError = <p>Please enter a valid value!</p>;\n    }\n    switch (props.elementType) {\n        case 'input':\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n\n        case 'textarea':\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n\n        case 'select':\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n\n        default:\n            inputElement = <input\n                className={classes.InputElement}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};","export const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n        const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n\n    return isValid;\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"_1xBm4j5hECL-q6sCIhiBB4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"_1J81rlRO5zxuF98VMkEamZ\"};"],"sourceRoot":""}