{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.css","shared/utility.js"],"names":["module","exports","Auth","state","loginForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","formIsValid","isSignup","inputChangeHandler","event","controlName","formData","JSON","parse","stringify","target","checkValidity","inputIdentifier","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","index","changed","invalid","shouldValidate","loading","errorMessage","error","style","color","className","classes","isAuthenticated","to","onSubmit","btnType","disabled","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","action","input","inputElement","inputClasses","InputElement","validationError","Invalid","join","onChange","options","option","displayValue","Input","Label","label","rules","isValid","trim","length","maxLength","test","isNumeric"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,YAAc,4B,iLCS3DC,E,4MACFC,MAAQ,CACJC,UAAW,CACPC,MAAO,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,sBAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVC,SAAS,GAEbC,OAAO,EACPC,SAAS,GAEbC,SAAU,CACNV,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,iBAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVK,UAAW,GAEfH,OAAO,EACPC,SAAS,IAGjBG,aAAa,EACbC,UAAU,G,EAUdC,mBAAqB,SAACC,EAAOC,GACzB,IAAMC,EAAQ,2BACPC,KAAKC,MAAMD,KAAKE,UAAU,EAAKvB,MAAMC,aAD9B,kBAETkB,EAFS,2BAGH,EAAKnB,MAAMC,UAAUkB,IAHlB,IAINZ,MAAOW,EAAMM,OAAOjB,MACpBI,MAAOc,YAAcP,EAAMM,OAAOjB,MAAO,EAAKP,MAAMC,UAAUkB,GAAaX,YAC3EI,SAAS,MAIbG,GAAc,EAClB,IAAK,IAAIW,KAAmBN,EACxBL,EAAcK,EAASM,GAAiBf,OAASI,EAGrD,EAAKY,SAAS,CAAE1B,UAAWmB,EAAUL,YAAaA,K,EAGtDa,cAAgB,SAAAV,GACZA,EAAMW,iBACN,EAAKC,MAAMC,OAAO,EAAK/B,MAAMC,UAAUC,MAAMK,MAAO,EAAKP,MAAMC,UAAUY,SAASN,MAAO,EAAKP,MAAMgB,W,EAGxGgB,sBAAwB,WACpB,EAAKL,UAAS,SAAAM,GACV,MAAO,CAAEjB,UAAWiB,EAAUjB,c,kEAhC9BkB,KAAKJ,MAAMK,gBAAkD,MAAhCD,KAAKJ,MAAMM,kBACxCF,KAAKJ,MAAMO,sB,+BAkCT,IAAD,OACCC,EAAoB,GAC1B,IAAK,IAAIC,KAAOL,KAAKlC,MAAMC,UACvBqC,EAAkBE,KAAK,CACnBC,GAAIF,EACJG,OAAQR,KAAKlC,MAAMC,UAAUsC,KAIrC,IAAII,EAAOL,EAAkBM,KAAI,SAACC,EAAaC,GAAd,OAC7B,kBAAC,IAAD,CACIP,IAAKM,EAAYJ,GACjBtC,YAAa0C,EAAYH,OAAOvC,YAChCC,cAAeyC,EAAYH,OAAOtC,cAClCG,MAAOsC,EAAYH,OAAOnC,MAC1BwC,QAAS,SAAC7B,GAAD,OAAW,EAAKD,mBAAmBC,EAAO2B,EAAYJ,KAC/DO,SAAUH,EAAYH,OAAO/B,MAC7BsC,eAAgBJ,EAAYH,OAAOlC,WACnCI,QAASiC,EAAYH,OAAO9B,aAGhCsB,KAAKJ,MAAMoB,UACXP,EAAO,kBAAC,IAAD,OAGX,IAAIQ,EAAe,KAInB,OAHIjB,KAAKJ,MAAMsB,QACXD,EAAe,uBAAGE,MAAO,CAAEC,MAAO,QAAUpB,KAAKJ,MAAMsB,QAGvD,yBAAKG,UAAWC,IAAQzD,MACnBmC,KAAKJ,MAAM2B,gBAAkB,kBAAC,IAAD,CAAUC,GAAIxB,KAAKJ,MAAMM,mBAAuB,KAC7Ee,EACD,0BAAMQ,SAAUzB,KAAKN,eAChBe,EACD,kBAAC,IAAD,CACIiB,QAAQ,UACRC,UAAW3B,KAAKlC,MAAMe,aAAcmB,KAAKlC,MAAMgB,SAAW,SAAW,WAE7E,kBAAC,IAAD,CACI4C,QAAQ,SACRE,QAAS5B,KAAKF,uBAFlB,aAEoDE,KAAKlC,MAAMgB,SAAW,SAAW,e,GAjHlF+C,aAsIJC,uBAfS,SAAAhE,GACpB,MAAO,CACHkD,QAASlD,EAAMiE,KAAKf,QACpBE,MAAOpD,EAAMiE,KAAKb,MAClBK,kBAAiBzD,EAAMiE,KAAKC,MAC5B/B,eAAgBnC,EAAMmE,cAAcC,SACpChC,iBAAkBpC,EAAMiE,KAAK7B,qBAGV,SAAAiC,GACvB,MAAO,CACHtC,OAAQ,SAAC7B,EAAOW,EAAUG,GAAlB,OAA+BqD,EAASC,IAAYpE,EAAOW,EAAUG,KAC7EqB,kBAAmB,kBAAMgC,EAASC,IAA2B,UAGtDN,CAA6CjE,I,gCChJ5D,qCA6DewE,IA1DD,SAACzC,GACX,IAAI0C,EAAe,KACbC,EAAe,CAACjB,IAAQkB,cAC1BC,EAAkB,KAStB,OAPI7C,EAAMkB,SAAWlB,EAAMmB,gBAAkBnB,EAAMlB,SAC/C6D,EAAajC,KAAKgB,IAAQoB,SAG1B9C,EAAMkB,SAAWlB,EAAMlB,UACvB+D,EAAkB,2DAEd7C,EAAM3B,aACV,IAAK,QACDqE,EAAe,yCACXjB,UAAWkB,EAAaI,KAAK,MACzB/C,EAAM1B,cAFC,CAGXG,MAAOuB,EAAMvB,MACbuE,SAAUhD,EAAMiB,WACpB,MAEJ,IAAK,WACDyB,EAAe,4CACXjB,UAAWkB,EAAaI,KAAK,MACzB/C,EAAM1B,cAFC,CAGXG,MAAOuB,EAAMvB,MACbuE,SAAUhD,EAAMiB,WACpB,MAEJ,IAAK,SACDyB,EAAe,4BACXjB,UAAWkB,EAAaI,KAAK,KAC7BtE,MAAOuB,EAAMvB,MACbuE,SAAUhD,EAAMiB,SACfjB,EAAM1B,cAAc2E,QAAQnC,KAAI,SAAAoC,GAAM,OACnC,4BAAQzC,IAAKyC,EAAOzE,MAAOA,MAAOyE,EAAOzE,OACpCyE,EAAOC,kBAIpB,MAEJ,QACIT,EAAe,yCACXjB,UAAWC,IAAQkB,cACf5C,EAAM1B,cAFC,CAGXG,MAAOuB,EAAMvB,MACbuE,SAAUhD,EAAMiB,WAE5B,OACI,yBAAKQ,UAAWC,IAAQ0B,OACpB,2BAAO3B,UAAWC,IAAQ2B,OAAQrD,EAAMsD,OACvCZ,EACAG,K,mBCvDb9E,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,MAAQ,wBAAwB,aAAe,0BAA0B,QAAU,4B,gCCDrI,kCAAO,IAAM2B,EAAgB,SAAClB,EAAO8E,GACjC,IAAIC,GAAU,EAcd,GAZID,EAAM5E,WACN6E,EAA2B,KAAjB/E,EAAMgF,QAAiBD,GAGjCD,EAAMvE,YACNwE,EAAU/E,EAAMiF,QAAUH,EAAMvE,WAAawE,GAG7CD,EAAMI,YACNH,EAAU/E,EAAMiF,QAAUH,EAAMI,WAAaH,GAG7CD,EAAM3E,QAAS,CAEf4E,EADgB,wJACEI,KAAKnF,IAAU+E,EAGrC,GAAID,EAAMM,UAAW,CAEjBL,EADgB,QACEI,KAAKnF,IAAU+E,EAIrC,OAAOA","file":"static/js/4.a42d3db7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"_2YUr1vYMbwujw6K1HuakLc\",\"ContactData\":\"_1Fuu3PjfwjLKAWKqQXtkT9\"};","import React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport * as action from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\nimport { checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        loginForm: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        formIsValid: false,\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetRedirectPath();\n        }\n    }\n\n\n    inputChangeHandler = (event, controlName) => {\n        const formData = {\n            ...JSON.parse(JSON.stringify(this.state.loginForm)),\n            [controlName]: {\n                ...this.state.loginForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.loginForm[controlName].validation),\n                touched: true\n            }\n        };\n\n        let formIsValid = true;\n        for (let inputIdentifier in formData) {\n            formIsValid = formData[inputIdentifier].valid && formIsValid;\n        }\n\n        this.setState({ loginForm: formData, formIsValid: formIsValid })\n    }\n\n    submitHandler = event => {\n        event.preventDefault();\n        this.props.onAuth(this.state.loginForm.email.value, this.state.loginForm.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup };\n        })\n    }\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.loginForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.loginForm[key]\n            })\n        };\n\n        let form = formElementsArray.map((formElement, index) => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                changed={(event) => this.inputChangeHandler(event, formElement.id)}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched} />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n        if (this.props.error) {\n            errorMessage = <p style={{ color: 'red' }}>{this.props.error}</p>;\n        }\n        return (\n            <div className={classes.Auth}>\n                {this.props.isAuthenticated ? <Redirect to={this.props.authRedirectPath} /> : null}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button\n                        btnType=\"Success\"\n                        disabled={!this.state.formIsValid}>{this.state.isSignup ? 'SIGNUP' : 'SIGNIN'}</Button>\n                </form>\n                <Button\n                    btnType=\"Danger\"\n                    clicked={this.switchAuthModeHandler}>SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token ? true : false,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(action.auth(email, password, isSignup)),\n        onSetRedirectPath: () => dispatch(action.setAuthRedirectPath('/'))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.css';\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n    let validationError = null;\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid)\n    }\n\n    if (props.invalid && props.touched) {\n        validationError = <p>Please enter a valid value!</p>;\n    }\n    switch (props.elementType) {\n        case 'input':\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n\n        case 'textarea':\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n\n        case 'select':\n            inputElement = <select\n                className={inputClasses.join(' ')}\n                value={props.value}\n                onChange={props.changed}>\n                {props.elementConfig.options.map(option => (\n                    <option key={option.value} value={option.value}>\n                        {option.displayValue}\n                    </option>\n                ))}\n            </select>;\n            break;\n\n        default:\n            inputElement = <input\n                className={classes.InputElement}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    );\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"s67N0w35nKdhFxX_3zncw\",\"Label\":\"_n-1my-7YxR9EuzWR3hhB\",\"InputElement\":\"_2-aFxd6_SUnHTHpTf8dvYS\",\"Invalid\":\"_1sl1p7M77V1I9nxTQviKpw\"};","export const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n        const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n\n    return isValid;\n};"],"sourceRoot":""}